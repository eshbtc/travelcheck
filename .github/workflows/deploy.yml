name: Deploy to Firebase

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
      
      - name: Clear npm cache
        run: npm cache clean --force
      
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      
      - name: Verify frontend package-lock.json exists
        run: |
          if [ ! -f "frontend/package-lock.json" ]; then
            echo "‚ùå frontend/package-lock.json is missing!"
            exit 1
          fi
          echo "‚úÖ frontend/package-lock.json exists"
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit --strict-peer-deps
      
      - name: Install functions dependencies
        run: |
          cd functions
          if [ -f "package-lock.json" ]; then
            echo "Using npm ci (package-lock.json exists)"
            npm ci --prefer-offline --no-audit --strict-peer-deps
          else
            echo "Using npm install (no package-lock.json)"
            npm install --prefer-offline --no-audit --strict-peer-deps
          fi
      
      - name: Run frontend type checks
        run: |
          cd frontend
          npm run type-check
      
      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint
      
      - name: Run functions linting
        run: |
          cd functions
          npm run lint
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build
      
      - name: Verify build output
        run: |
          if [ ! -d "frontend/out" ]; then
            echo "‚ùå Frontend build output directory 'out' not found!"
            exit 1
          fi
          echo "‚úÖ Frontend build completed successfully"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
      
      - name: Clear npm cache
        run: npm cache clean --force
      
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      
      - name: Verify frontend package-lock.json exists
        run: |
          if [ ! -f "frontend/package-lock.json" ]; then
            echo "‚ùå frontend/package-lock.json is missing!"
            exit 1
          fi
          echo "‚úÖ frontend/package-lock.json exists"
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit --strict-peer-deps
      
      - name: Install functions dependencies
        run: |
          cd functions
          if [ -f "package-lock.json" ]; then
            echo "Using npm ci (package-lock.json exists)"
            npm ci --prefer-offline --no-audit --strict-peer-deps
          else
            echo "Using npm install (no package-lock.json)"
            npm install --prefer-offline --no-audit --strict-peer-deps
          fi
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build
      
      - name: Verify build output
        run: |
          if [ ! -d "frontend/out" ]; then
            echo "‚ùå Frontend build output directory 'out' not found!"
            exit 1
          fi
          echo "‚úÖ Frontend build completed successfully"
      
      - name: Deploy Firebase Functions
        run: firebase deploy --only functions --token ${{ secrets.FIREBASE_TOKEN }}
      
      - name: Deploy Firestore rules
        run: firebase deploy --only firestore:rules --token ${{ secrets.FIREBASE_TOKEN }}
      
      - name: Deploy Storage rules
        run: firebase deploy --only storage --token ${{ secrets.FIREBASE_TOKEN }}
      
      - name: Deploy Firebase Hosting
        run: firebase deploy --only hosting --token ${{ secrets.FIREBASE_TOKEN }}
      
      - name: Verify deployment
        run: |
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Frontend: https://travelcheck-app.web.app"
          echo "üîß Functions: Deployed to us-central1"
